// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.agents";
option java_outer_classname = "AgentsProto";

package ragent;

// Interface exported by the server.
service AgentService {
  rpc StreamVoice (stream VoiceStreamRequest) returns (VoiceStreamResponse);

  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  //rpc GetFeature(Point) returns (Feature) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  //rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  //rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  //rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// This is a placeholder comment.
message Thing {
  // Define fields that match your Rust 'Thing' struct
//  string id = 1;
}

// This is a placeholder comment.
message VoiceStreamResponse {
}

// This is a placeholder comment.
message VoiceStreamRequest {
  // This is a placeholder comment.
  oneof request {
    string agent_id = 1;
    bytes data = 2;
  }
}

// This is a placeholder comment.
message UserEvent {
  Thing user_id = 1;
  Thing space_id = 2;
  // This is a placeholder comment.
  oneof user_event_type {
    SpeakBytesEvent speak_bytes_event = 100;
    SpeakEvent speak_event = 102;
    SpeakResultEvent speak_result_event = 103;
    UserJoinedEvent user_joined_event = 104;
    UserLeftEvent user_left_event = 105;
    ResetDeviceEvent reset_device_event = 106;
    WaitEvent wait_event = 107;
    SingEvent sing_event = 108;
    SleepEvent sleep_event = 109;
    WakeEvent wake_event = 110;
    SystemEvent system_event = 111;
    ImageBytesEvent image_bytes_event = 112;
    EmoteEvent emote_event = 113;
  }
}

// This is a placeholder comment.
message SpeakBytesEvent {
  bytes data = 1;
}

/// Speaks text using the provided voice name and emotion. The text may be a single sentence or multiple sentences.
message SpeakEvent {
  string text = 1;
}

/// Sets the current emotion of the agent. Call this function prior to speaking if the tone of the agent's voice should be different than the last emotion of the agent.
message EmoteEvent {
  string text = 1;
}

/// Sings a song with the name provided. Must be one of the available song names, which are: 'hallelujah', 'titanium', 'wish upon a star', 'duck song', 'in my heart' and 'quacky adventures'.
message SingEvent {
  string song_name = 1;
}

// Puts the agent to sleep. Call this function if a user requests the agent to be turned off.
message SleepEvent {
}

// Awakes the agent from sleep. Call this function if a user requests the agent to be turned on after being turned off. The user should specifically say the agent's name for this to be called.
message WakeEvent {
}

// This represents a general system message sent to an agent. An agent will receive system messages if there is some general information it needs to be made aware of.
message SystemEvent {
  string message = 1;
}

// This represents no response in a conversation. Call this function if no function should be called. Used instead of any other functions if it is most appropriate to wait for further outside input instead of responding. ONLY use this if explicitly waiting for input from a player.
message WaitEvent {
}

// This is a placeholder comment.
message ImageBytesEvent {
  bytes data = 1;
}

// This is a placeholder comment.
message SpeakResultEvent {
  string asset_id = 1;
}

// This is a placeholder comment.
message UserJoinedEvent {
}

// This is a placeholder comment.
message UserLeftEvent {
}

// This action resets the device the agent is running on. Only use this action if prompted to!
message ResetDeviceEvent {
}